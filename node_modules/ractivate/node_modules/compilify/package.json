{
  "name": "compilify",
  "version": "0.1.0",
  "description": "A tool to make a simple compiler transform for Browserify",
  "main": "index.js",
  "repository": {
    "type": "git",
    "url": "git://github.com/jrajav/compilify.git"
  },
  "dependencies": {
    "through": "~2.3.4"
  },
  "devDependencies": {
    "mocha": "~1.19.0",
    "chai": "~1.9.1",
    "browserify": "~4.1.5",
    "eslint": "~0.6.2"
  },
  "scripts": {
    "test": "node_modules/eslint/bin/eslint.js . && node_modules/mocha/bin/mocha -R spec"
  },
  "author": {
    "name": "Jonathan Rajavuori",
    "email": "jrajav@gmail.com"
  },
  "license": "MIT",
  "readmeFilename": "README.md",
  "readme": "# compilify\n\nThis package allows you to easily create a new [Browserify](https://github.com/substack/node-browserify) transform for a compiler, where \"compiler\" means any tool that takes in a file and transforms it somehow. Compilify will wrap your compiler, passing it the raw file and then packing the compiled result into a Browserify module to be require()'d. This allows you to bypass all the streaming boilerplate when you are using a framework that only operates synchronously on a whole file.\n\nThe compiler can take in an options object, and a set of default options can be specified when making the compilify transform. Compilify will handle two options for you, `extensions` and `excludeExtensions`, to restrict or allow the types of files your compiler will act on.\n\n\n## API\n\n```javascript\nvar compilify = require( 'compilify' )\n\ncompilify( compilerFunction [, defaultOptions ] )\n```\n\n`compilerFunction` should be a function of this form:\n\n```javascript\nfunction compilerFunction( file [, options ] ) {\n\t\n\t// Perform transformation\n\n\treturn transformedFile\n\n}\n```\n\n`options` will be an object containing options that are passed in when the Browserify transform is invoked. If an option is not set via Browserify, it will be populated from the `defaultOptions` object. If there are no options or default options, `options` will be an empty object.\n\n## Options handled by compilify\n\n```javascript\n{\n\textensions: [ Array of strings ],\n\texcludeExtensions: [ Array of strings ]\n}\n```\n\nIf neither of these options are set, your transform will operate on all files. If set, these options will also be passed through to your compiler function.\n\n##### extensions:\n\nSetting this option to an array of file extensions will restrict your transform to operating on files that end with one of those extensions.\n\n##### excludeExtensions:\n\nSetting this option to an array of file extensions will exclude files ending with one of those extensions from being operated on by your transform. If a file extension is set in both extensions and excludeExtensions, excludeExtensions will override.\n\n### Example\n\n```javascript\nvar compilify = require( 'compilify' )\n\ncompilify( myCompiler, { extensions: [ '.html', '.tmpl' ] } )\n```\n\n## Usage\n\n### Creating a compiler transform\n\n```javascript\n// package 'foobarify'\n\nvar compilify = require( 'compilify' )\n\nfunction foobarCompiler( file ) {\n\n\treturn file.replace( 'foo', 'bar' )\n\n}\n\nmodule.exports = compilify( foobarCompiler )\n```\n\n### Creating a transform with options\n\n```javascript\n// package 'foobarify'\n\nvar compilify = require( 'compilify' )\n\nfunction foobarCompiler( file, options ) {\n\n\treturn file.replace( 'foo', options.replacement )\n\n}\n\n// Setting default to be 'bar'\nmodule.exports = compilify( foobarCompiler, { replacement: 'bar' } )\n```\n\n### Using the transform\n\n#### On the command line \n\n```shell\n$ browserify -t foobarify main.js\n```\n\n#### With the Browserify API\n\n```javascript\nvar foobarify = require( 'foobarify' )\n\nvar b = browserify( )\nb.add( 'main.js' )\nb.transform( foobarify )\nb.bundle( ).pipe( process.stdout )\n```\n\n#### Passing options\n\n```shell\n$ browserify -t [ foobarify --replacement \"baz\" ] main.js\n```\n\n```javascript\nvar foobarify = require( 'foobarify' )\n\nvar b = browserify( )\nb.add( 'main.js' )\nb.transform( { replacement: 'baz' }, foobarify )\nb.bundle( ).pipe( process.stdout )\n```\n",
  "bugs": {
    "url": "https://github.com/jrajav/compilify/issues"
  },
  "homepage": "https://github.com/jrajav/compilify",
  "_id": "compilify@0.1.0",
  "_shasum": "9d48393635eae142502095ae7cfcd9dea4c33db7",
  "_from": "compilify@~0.1.0",
  "_resolved": "https://registry.npmjs.org/compilify/-/compilify-0.1.0.tgz"
}
