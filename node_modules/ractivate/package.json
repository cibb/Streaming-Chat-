{
  "name": "ractivate",
  "version": "0.2.0",
  "description": "browserify 2 transform for Ractive templates",
  "main": "index.js",
  "repository": {
    "type": "git",
    "url": "git://github.com/jrajav/ractivate.git"
  },
  "dependencies": {
    "compilify": "~0.1.0",
    "ractive": "0.x"
  },
  "devDependencies": {
    "mocha": "~1.19.0",
    "chai": "~1.9.1",
    "browserify": "~4.1.5",
    "browser-run": "~0.2.2",
    "eslint": "~0.6.2",
    "through": "~2.3.4"
  },
  "scripts": {
    "test": "node_modules/eslint/bin/eslint.js . && node_modules/mocha/bin/mocha test/test.js"
  },
  "keywords": [
    "handlebars",
    "ractive",
    "ractivejs",
    "ractive.js",
    "template",
    "browserify",
    "browserify-transform"
  ],
  "author": {
    "name": "Jonathan Rajavuori",
    "email": "jrajav@gmail.com"
  },
  "license": "MIT",
  "readmeFilename": "README.md",
  "readme": "# Ractivate\n\nThis [Browserify](https://github.com/substack/node-browserify) transform will pre-parse any [Ractive.js](https://github.com/ractivejs/ractive) templates that you `require()` in your script files.\n\nNote that if you use this, you probably won't need `Ractive.parse()` anymore, so you should change `require( 'ractive' )` to be `require( 'ractive/build/ractive.runtime' )` to cut down Ractive's size. You can do this automatically with a transform like [aliasify](https://github.com/benbria/aliasify).\n\n## Example\n\n```javascript\nvar Ractive = require( 'ractive' )\n\nvar ractive = new Ractive( {\n\n    el: '#main',\n     // This will resolve to the parsed template when you bundle up with Browserify.\n     // No parsing client-side!\n    template: require( './template.html' ),\n    data: {\n        foo: 'bar'\n    }\n\n} )\n```\n\n## Options\n\nYou can pass two options to configure the behavior of the transform:\n\n```\n{\n    extensions: [ Array of strings ],\n    excludeExtensions: [ Array of strings ]\n}\n```\n\n#### extensions\n\nAn array of file extensions that the transform will be restricted to. If this option is not an array (e.g. `null` or `undefined`), the transform will operate on all of the files it receives.\n\nBy default, this option is set to `[ '.html' ]`.\n\n#### excludeExtensions\n\nAn array of file extensions that the transform will ignore. Individual extensions set here will override those set in **extensions**.\n\nBy default, this option is not set.\n\n## Usage\n\n#### On the command line \n\n```shell\n$ browserify -t ractivate main.js\n```\n\n#### With the Browserify API\n\n```javascript\nvar ractivate = require( 'ractivate' )\n\nvar b = browserify( )\nb.add( 'main.js' )\nb.transform( ractivate )\nb.bundle( ).pipe( process.stdout )\n```\n\n#### Passing options\n\n```javascript\nvar ractivate = require( 'ractivate' )\n\nvar b = browserify( )\nb.add( 'main.js' )\nb.transform( { extensions: [ '.ract' ] }, ractivate )\nb.bundle( ).pipe( process.stdout )\n```\n\nNote: Browserify's command line interface is very limited for passing array options. I recommend you use the API if you need to configure Ractivate.\n",
  "bugs": {
    "url": "https://github.com/jrajav/ractivate/issues"
  },
  "homepage": "https://github.com/jrajav/ractivate",
  "_id": "ractivate@0.2.0",
  "_shasum": "b8f8b36a3f82606f4a2dfa8162303789738d6c1c",
  "_from": "ractivate@",
  "_resolved": "https://registry.npmjs.org/ractivate/-/ractivate-0.2.0.tgz"
}
